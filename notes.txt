8/22/24

- Go to the earliest point where the validator starts. Thats where we should check for the json 
- `parse_config()` checks if key hyperparameters are set. If they are, it excludes them from the hyperparameter search. 
- edit `parse_config()` to look at the json input instead



/folding/validators/forward.py
def parse_config(config) -> List[str]
    ...
    return exclude_in_hp_search
-> 

/folding/validators/forward.py
def try_prepare_challenge(config, pdb_id: str) -> Dict
    exclude_in_hp_search = parse_config(config) 
    hp_sampler = HyperParameters(exclude=exclude_in_hp_search) 

-> 

/folding/validators/forward.py
def create_new_challenge(self, exclude:List) -> Dict 
    ...
    bt.logging.warning(f"Attempting to prepare challenge for pdb {pdb_id}")
    event = try_prepare_challenge(config=self.config, pdb_id=pdb_id)            # where does this config come from?

    The config comes from the validator instance `Validator(BaseValidatorNeuron)`. By default, the config is set to `None`




If we set the config in the context manager, then this will make its way to the hyperparameter search. Let's try it 
    Path to config -> /home/paperspace/folding/folding/utils/config_input.json
    















->

/neurons/validator.py
class Validator(BaseNeuronValidator)
    def add_jobs(self, k: int):
        job_event: Dict create_new_challenge(self, exclude=exclude_pdbs): # not to be confused here. these are pdb's that have already byeen run / running




/folding/validators/hyperparameters.py

# when this class is instantiated, `create_parameter_space()` is called then `setup_combinations()` is called

class HyperParameters
    def __init__(self, exclude: Union[Dict[str, str], List[str]] = None) -> None:

-> 




























- No longer input from CLI.
    - Input will be from a JSON file.
    - Anything that differs from default parameters will be noted and switched in the output from hyperparam search 

/home/paperspace/folding/folding/validators/protein.py
    - Init the protein class using the simulation config class. (This is done through from_job)
    - from_job has been changed so that it unpacks **config that comes in as input to SimulationConfig.
    - from_job is called in the validator forward. Within, a config is provided as self.config.protein. (these are from the old config file.)
    - from_job now needs to be called using the config after the hyperparameter search. 

/home/paperspace/folding/folding/utils/new_config.py
    - New location that will hold the classes for handling the config thats output by hyperparam check. 
        NonboundedMethod(Enum)
        Constraints(Enum)
        SimulationConfig(BaseModel)
          define an unpacking method for the incoming config_input  

/home/paperspace/folding/folding/utils/config_input.json
    - This will be the input file. So anything here that differes from the 
    - hyperparam search will be applied to the simulation. 

When we sample hyperparameters, the output will be a tuple of values corresponding to these keys: 
        ('charmm27', 'dodecahedron', 'tip3p', 1.0)
    The tuple represents a combination of hyperparameters where 
        'FF', 'BOX', 'WATER', 'BOX_DISTANCE'. 
    are associated with the elements of the tuple above, respectively. 







What are the most important parameters to get the simulation running.
    Having the dict/json and loading it into the pipeling. (protein class)
    use the simulation config as a base set of params.
    Pass them into a json file and make sure they make sense.
    Where are we loading this and how is it getting loaded into the protein class itself.

    wherever the protein class is instantiated,
    we want it be instantiated with all the parameters.
    Then we need a funciton to save those params into a file.


Json config lives in the same place as the mdp's, this is passed to szymon's class so that the type checking gets done.
make the json files so that they contain everything we need.

Think about how they are going to be edited? look at the current functions that edit the mdp files.

